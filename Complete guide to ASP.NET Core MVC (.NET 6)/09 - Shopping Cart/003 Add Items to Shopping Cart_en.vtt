WEBVTT

00:01.750 --> 00:08.260
So with all that security in place for our shopping cart, when we hit the add to cart button, finally

00:08.260 --> 00:11.320
we can add items to our shopping cart table.

00:12.460 --> 00:16.870
So let's work with the areas inside customer area.

00:16.900 --> 00:19.540
We have controllers, home controller.

00:19.870 --> 00:20.980
We have the details.

00:20.980 --> 00:23.350
Get action method here.

00:23.350 --> 00:29.320
We will have to implement the proposed action method for detail so that can copy and paste that one

00:29.320 --> 00:30.280
more time here.

00:30.760 --> 00:33.070
And this will be HGTV post.

00:34.460 --> 00:36.200
When we use it, should it be pushed?

00:36.350 --> 00:43.040
We should use to validate and forgery token, and then we do not want anyone to be able to access this

00:43.040 --> 00:43.940
detailed speech.

00:44.780 --> 00:47.340
We can only add items to a shopping cart.

00:47.360 --> 00:52.940
If the user is locked, then because we need the application user ID in our table.

00:54.060 --> 00:56.260
So we want some way to enforce that.

00:56.280 --> 01:00.690
You must be locked in only then you can access this post action method.

01:01.810 --> 01:04.300
Dot net cord makes this very simple.

01:05.050 --> 01:12.850
We have to authorize attribute inside Microsoft that ASP.NET Core Dot authorization, if you acted on

01:12.850 --> 01:19.030
any action method, only authorized users are able to access the post action method now.

01:19.840 --> 01:23.050
And here we are saying we just want users to be authorized.

01:23.260 --> 01:25.030
We don't care what role they are in.

01:25.240 --> 01:29.860
As long as they are authorized, then they can access the post action method.

01:30.460 --> 01:31.240
Pretty simple.

01:31.880 --> 01:34.390
So authorization, it's pretty simple.

01:34.640 --> 01:38.800
Got that core that like open up the details for you here.

01:39.040 --> 01:40.030
Go to a few.

01:40.450 --> 01:46.600
We have the form matter of post and we have to submit button, which is act or card.

01:47.560 --> 01:51.670
So when this button is posted, what are the few details that we need?

01:52.240 --> 01:57.790
We just need that count, since that's an ASP for it will automatically be posted.

01:58.420 --> 02:02.110
Next, what we need is the application user and the product ID.

02:02.980 --> 02:09.580
We do not have product ID on the page here, so we have to add that in the hidden attribute inside the

02:09.580 --> 02:16.810
phone tag where we have set input hayden and ASP for where the product started.

02:18.070 --> 02:24.670
Also, if you notice here inside the model here, we directly have a product ID, you can use that as

02:24.670 --> 02:25.000
well.

02:25.180 --> 02:31.240
But inside the home controller, we are not populating that in the shopping cart object, so we can

02:31.240 --> 02:33.940
do that product ID is equal to it.

02:34.930 --> 02:42.760
Then the Product ID and Product ID both will be populated since we have product data in the hidden property.

02:43.030 --> 02:46.900
Make sure to use that in the post action method right here.

02:46.930 --> 02:49.390
We will be receiving the shopping cart object.

02:49.900 --> 02:51.670
We can call that shopping cart.

02:52.450 --> 02:58.000
So inside the shopping cart, we will have the product I.D. as well as the count of the product that

02:58.000 --> 02:58.810
users want.

02:59.470 --> 03:06.790
But we do not have the user ID of the logged in user requiring that a simple internet call.

03:07.060 --> 03:12.910
We will have to work with the team's identity, which is inside the default user implementation.

03:13.690 --> 03:15.400
Let me show you how to do that.

03:15.880 --> 03:19.480
We will have the default claims identity is equal to.

03:19.870 --> 03:24.760
We have a user object that is always available by default with the controller.

03:25.780 --> 03:32.350
So on user, we have user identity before we work on this user card identity.

03:32.650 --> 03:34.690
Let me add a debugging point here.

03:35.020 --> 03:40.960
And when the application, I want to show you what the default user object looks like.

03:41.800 --> 03:43.180
We have an error here.

03:43.720 --> 03:49.210
Let me open the error list here, and we can just comment this out.

03:49.570 --> 03:50.710
We do not need that.

03:51.160 --> 03:53.410
Let's run that application one more time.

03:55.620 --> 04:01.320
Let me log in here as any user and click the add to cart button.

04:02.190 --> 04:04.170
Let's examine the user object.

04:04.470 --> 04:10.200
It was noticed we have the identity inside there and there you see something called claims.

04:10.890 --> 04:14.700
You can see we have multiple claims that are associated with the user.

04:15.150 --> 04:18.420
One of the claim is the role of the user, which is company.

04:19.110 --> 04:24.150
We also have name and email address, and both of them are the email address itself.

04:24.900 --> 04:29.950
But the one that we care about is the name identifier, which is the user ID..

04:31.020 --> 04:37.260
So from a user identity, we need to find out a claim with the name of name identifier.

04:38.290 --> 04:43.060
So let me stop the application and let me remove the debugging point here.

04:43.870 --> 04:50.950
Then when we are getting the user identity, we can take cash to claims identity, but we'll have to

04:50.950 --> 04:53.740
press control, dark to act the using statement.

04:54.610 --> 04:58.540
We can extract the claim that we want from these claims identity.

04:59.140 --> 05:06.070
So we'll take claims, identity dot, find first and here we can pass the content that is inside claim

05:06.070 --> 05:06.550
types.

05:06.910 --> 05:08.620
We have the name identifier.

05:09.430 --> 05:16.510
You can see the name identifier is a constant with the default schemas for identity claims name identifier,

05:17.350 --> 05:25.420
and that is exactly what we had for our user ID. So now if we access the shopping cart dark, we have

05:25.420 --> 05:26.260
the application.

05:26.260 --> 05:30.850
User ID User I.D. will be inside claimed dark value.

05:31.390 --> 05:35.080
If claim is null, that means that the user is not locked in.

05:35.740 --> 05:40.630
But we do not worry about that here because we have authorized keywords on the top.

05:41.650 --> 05:46.120
So that way, we will extract the user I.D. from the claims identity.

05:47.290 --> 05:53.290
Once we extract that, our shopping cart will already have the count and the product very populated

05:54.010 --> 06:00.120
because of that, we can directly add that to our database using cannot afford to start shopping cart

06:00.130 --> 06:00.910
parked ahead.

06:01.480 --> 06:02.970
Let's have the shopping cart.

06:03.850 --> 06:07.480
Once we have that, do not forget to call the save method.

06:08.170 --> 06:10.990
Finally, we want to redirect to the home page.

06:11.500 --> 06:15.550
So right here we have returned whether it's a redirect to action.

06:16.150 --> 06:23.650
We want to redirect to the index action, which is inside the same controller right here that will take

06:23.650 --> 06:30.670
us to the home page if this action method was inside some of that controller inside the next parameter.

06:30.850 --> 06:36.400
You can write the controller name like, let's say, a card controller, if that was the case.

06:37.270 --> 06:44.250
This is home controller so we can just leave it blank and it will automatically redirect us to the index

06:44.260 --> 06:44.770
action.

06:45.730 --> 06:48.040
No, I am not a fan of Magic Strings.

06:48.760 --> 06:51.640
Thankfully, there is a helper method which is name off.

06:52.150 --> 06:56.620
And here it automatically finds the action method in this context.

06:56.860 --> 06:59.770
And you can see we have the index action method.

07:00.890 --> 07:05.270
So we have done quite a few things to add first item to our shopping cart.

07:05.990 --> 07:09.320
Let me add a debating point and run the application.

07:11.520 --> 07:13.110
Our future is locked in.

07:13.350 --> 07:14.520
Let's go to details.

07:15.000 --> 07:19.050
Modify the count to three and let's hit add to cart.

07:19.770 --> 07:25.170
Let me press F10 here and examine the shopping cart object right here.

07:25.260 --> 07:33.090
We have to count and product I.D. with the application user I.D. But the ID is also populated, and

07:33.090 --> 07:36.900
that should never happen because we are creating a shopping cart.

07:37.140 --> 07:39.090
So the ID should be zero.

07:39.840 --> 07:45.900
Somehow, it is getting the same I.D. as product I.D. So that may stop the application.

07:46.080 --> 07:47.250
Let's not add that.

07:47.670 --> 07:49.860
And let's see why that is the case.

07:51.180 --> 07:54.960
I believe the reason is because right here we have the integrity.

07:55.200 --> 07:58.050
So it is binding automatically to the model.

07:58.680 --> 08:01.850
So what we can do is we can call this the product I.D..

08:03.320 --> 08:10.100
Once we do that, let me make it product tidy here, and we'll modify here as well.

08:10.850 --> 08:11.630
Perfect.

08:12.260 --> 08:14.690
Next, what we need to do is copy this name.

08:14.900 --> 08:16.340
Go to the index view.

08:18.360 --> 08:20.820
And there we are, passing the ESB route.

08:21.330 --> 08:27.150
The name will be product I.D. Let's run the application and check that out.

08:29.580 --> 08:33.280
Let's go to details at the count of five, maybe.

08:34.330 --> 08:37.930
And we hit the add button, but we did not hit our great point.

08:38.560 --> 08:41.620
Let's see the tables or shopping carts here.

08:43.580 --> 08:46.970
And perfect, it created a count of five productivity.

08:47.000 --> 08:51.890
The idea is one, let me go back here, did we remove our breakpoint?

08:53.080 --> 08:53.800
Yes, we did.

08:54.220 --> 08:57.800
I was under the impression that we still have a great point here.

08:57.820 --> 09:04.900
So I was waiting for that breakpoint to be hit, but that's OK if we examine our database here, all

09:04.900 --> 09:06.460
the records are correct now.

09:06.490 --> 09:08.110
The I.D. is also correct.

09:08.120 --> 09:12.100
It should be one because this is the first record in our database.

09:12.940 --> 09:15.940
So if we go back, let's not act the same product.

09:16.120 --> 09:18.230
Let's add a different product this time.

09:18.520 --> 09:19.840
Make it a count of two.

09:20.350 --> 09:23.890
And let me add a debugging point again, just to be sure.

09:24.520 --> 09:26.470
Let's examine our shopping cart here.

09:26.890 --> 09:27.230
Great.

09:27.250 --> 09:29.020
You can see the ID is zero.

09:29.320 --> 09:35.050
We do not have application user that will be populated now when we are adding item.

09:35.470 --> 09:37.270
All the three figures are correct.

09:38.050 --> 09:39.310
Let's continue.

09:40.300 --> 09:42.380
And that may remove the debugging point.

09:43.060 --> 09:45.580
Examine the database that looks good.

09:46.480 --> 09:49.240
With that, let's continue in the next video.

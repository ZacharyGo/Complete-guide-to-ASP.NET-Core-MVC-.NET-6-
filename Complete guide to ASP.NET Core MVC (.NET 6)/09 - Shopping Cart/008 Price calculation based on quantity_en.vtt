WEBVTT

00:01.830 --> 00:07.710
Now that we are passing the shopping cart for your model to work index for you, that's one the application

00:07.950 --> 00:09.990
and then make changes to our view.

00:11.160 --> 00:12.510
We have an error here.

00:12.900 --> 00:14.430
Let me see what that is.

00:15.560 --> 00:20.630
When we had to get something in the repository, we made the filter required property.

00:21.170 --> 00:26.870
So because of which it is failing, that opened the repository and repository.

00:27.560 --> 00:32.330
If I scroll down here, we will have to make this further indelible property.

00:32.870 --> 00:39.260
So if it's not present, it will be known that they make the same change in the interface here.

00:41.320 --> 00:42.400
And that's perfect.

00:42.820 --> 00:48.250
We do not want to make for eternal inflation or default, because when we are getting one record that

00:48.250 --> 00:52.630
will always be a condition based on that one record will be retrieved.

00:53.590 --> 00:55.480
So with that, our credit goes away.

00:55.720 --> 01:00.730
But we need to make a change in capacity since the filter can be now here.

01:01.120 --> 01:04.170
We need to apply the filter only if that is not.

01:04.180 --> 01:04.510
No.

01:08.480 --> 01:09.110
Perfect.

01:09.320 --> 01:12.650
Let's run that application and everything should work now.

01:14.270 --> 01:16.380
And let's go to our shopping cart here.

01:16.940 --> 01:22.370
Now, let me go and get the view and modify the details to display on the shopping cart.

01:23.150 --> 01:26.360
Let me go back and we have to go to the index for you.

01:26.360 --> 01:27.320
Insert card.

01:27.800 --> 01:30.320
Let me close on that page.

01:31.220 --> 01:33.390
First thing, what will be the motto here?

01:33.740 --> 01:35.990
This will be the shopping cart view model.

01:36.590 --> 01:41.180
So that is inside pocketbook models, dark view models.

01:41.630 --> 01:47.150
We have the shopping cart view model, then we have a button to continue shopping.

01:47.450 --> 01:53.840
And this should take us to the home page so we can define when someone clicks here, we can go to the

01:53.840 --> 02:02.120
area of customer control, will be the home controller and action will be the index action.

02:03.450 --> 02:07.830
That way, it will take us back to the home page that scroll down.

02:08.190 --> 02:11.850
We have the image and all the other properties for a shopping cart.

02:12.630 --> 02:18.660
So this particular role that we have, we will have to repeat that every time for the shopping cart

02:18.660 --> 02:22.050
items so that it had before each loop.

02:22.530 --> 02:27.000
And we would say really about item in model that list cart.

02:29.180 --> 02:32.930
I will also include H.R. and then close to four each.

02:34.100 --> 02:36.110
Let me open to for each look now.

02:36.590 --> 02:42.970
And first thing here is image, which is inside item, dark product, dark image water.

02:43.850 --> 02:48.560
So everything will be inside item dark product so we can just copy this.

02:50.210 --> 02:55.820
Next, we have the title that is inside item dark product title books.

02:55.820 --> 02:58.400
The description it's using the rich text box.

02:59.030 --> 03:06.130
So to display that, we will use HDR amount of dark, raw and inside that we will have item, dark product,

03:06.140 --> 03:07.160
dark description.

03:09.100 --> 03:10.060
We scroll down.

03:10.720 --> 03:11.800
That could save this.

03:12.760 --> 03:15.700
Let's go back and refresh this look scared.

03:16.120 --> 03:24.940
Let's display the price and current price will be an item that product price and multiply that by the

03:24.940 --> 03:28.210
count that is inside item dark count.

03:30.160 --> 03:31.150
Let's see if that.

03:31.390 --> 03:34.030
Go back and refresh and perfect.

03:34.240 --> 03:38.140
Let me display the price and currency of the space here.

03:39.040 --> 03:43.930
So what saved up to string and we want the currency format?

03:45.560 --> 03:45.950
Great.

03:46.190 --> 03:47.390
That looks much better.

03:48.050 --> 03:51.050
We can add a space before and after x year.

03:55.250 --> 03:56.160
Let's go back.

03:56.720 --> 03:57.770
And that looks good.

03:58.610 --> 04:01.910
After that, the patterns here, where they work on that later on.

04:02.210 --> 04:06.830
But we want something to display the grand total, how well they do that.

04:07.580 --> 04:15.500
What I will do is if we go back to the code and if we open the card controller insert customer, I can

04:15.500 --> 04:19.310
add one more property here, which will be order total.

04:20.790 --> 04:23.220
Support fact, we have the price right here.

04:24.380 --> 04:30.950
But one thing, if you remember we have in our logic is if they go to home and details, the price depends

04:30.950 --> 04:31.880
on the quantity.

04:32.420 --> 04:36.320
So if someone increases the quantity, the price will decrease.

04:37.350 --> 04:43.110
So at that rate, we need some logic to find out what will be the final price of the item in the shopping

04:43.110 --> 04:43.560
cart.

04:44.280 --> 04:49.710
So to hold that dynamic property, what we can do is if we go to our shopping cart model.

04:51.700 --> 04:58.780
We can add one more property at the bottom here, which will be prop double price.

04:59.500 --> 05:04.960
Now you might be thinking that when we add a property here, it will add that to the database when we

05:04.960 --> 05:05.950
add migration.

05:06.490 --> 05:12.760
We do not want that this property will be a place holder and it should not be mapped to the database

05:13.570 --> 05:14.770
for such properties.

05:14.890 --> 05:17.740
We have an attribute here which is not mapped.

05:18.550 --> 05:24.130
This does Entity Framework Code that we have one property in this class, but we do not want this to

05:24.130 --> 05:26.770
be mapped to our tables and database.

05:27.830 --> 05:34.970
So if we go to our card controller inside here, we need some logic to calculate the final price based

05:34.970 --> 05:35.630
on the count.

05:36.470 --> 05:43.970
The logic for that is pretty simple, but let me create a function here, which will be price based

05:43.970 --> 05:45.050
on quantity.

05:47.250 --> 05:53.900
What they will do is in parameter here, they will receive quantity and based on that quantity.

05:54.450 --> 05:56.040
Let us receive all the praise.

05:57.380 --> 06:00.710
So we have price price 50 and price 100.

06:01.400 --> 06:06.830
We're going to check here if quantity is less than or equal to 50.

06:07.370 --> 06:12.140
In that case, we returned price then in the spark.

06:12.500 --> 06:16.730
We will check if quantity is less than or equal to 100.

06:17.750 --> 06:21.140
We return price 50 elsewhere.

06:21.200 --> 06:22.750
Return price hundred.

06:24.860 --> 06:28.220
The return type here will be double for the price.

06:29.500 --> 06:31.000
So this method looks good.

06:31.240 --> 06:34.900
We just need to invoke that and we need to pass the quantity.

06:35.950 --> 06:39.790
We need to invoke that for all the items in our shopping cart.

06:40.510 --> 06:42.580
So we need a for each loop here.

06:42.880 --> 06:48.160
And was it really about car and shopping cart, new model, tallest car?

06:48.760 --> 06:55.810
We want to populate the cart dark price, which is the property that we just added from our method,

06:55.810 --> 07:00.110
which is get price based on quantity, contract count.

07:00.110 --> 07:04.030
That's what we pass here and then we need to pass on the price.

07:04.720 --> 07:07.780
So that is inside product price.

07:08.350 --> 07:14.560
We have price 50 and price 100 so that it will calculate the final price.

07:14.800 --> 07:21.310
And that's saying that our shopping cart, once we save this inside our index, where we are displaying

07:21.310 --> 07:23.980
price, we will not display the product price.

07:24.340 --> 07:26.230
We will display item about price.

07:26.650 --> 07:28.810
That is the price that will be calculated.

07:29.470 --> 07:30.310
That looks good.

07:30.520 --> 07:31.960
Let's run the application.

07:34.050 --> 07:35.700
Let's go to our card here.

07:36.940 --> 07:39.050
And you see the price is thirty five.

07:39.100 --> 07:40.870
We only have eight books here.

07:41.620 --> 07:44.290
Let's add more giant and thieves to our card.

07:45.660 --> 07:47.020
Let me add one more.

07:47.370 --> 07:49.890
That time, the price should be 34.

07:50.580 --> 07:51.480
Let's ask them.

07:52.550 --> 07:57.560
And perfect, you can see the process changing based on the quantity that the had.
